openapi: 3.0.0
info:
  title: User API Specification
  description: User API Specification
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/api'
paths:
  /auth/login:
    post:
      tags:
        - "Auth"
      summary: "Login to a user"
      requestBody:
        required: true
        description: "Request Body User"
        content:
         application/json:
           schema:
             type: object
             required:
               - username
               - password
             properties:
               username:
                 type: string
                 minLength: 5
               password:
                 type: string
                 minLength: 8
           example:
             username: admin
             password: admin
      responses:
        200:
          description: "Success Login"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: "Auth Token"
                      expiredAt:
                        type: integer
                        description: "Expired time of auth token in millisecond"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorSchema"
              example:
                errors: "Username or password must not blank"
        401:
          description: "Unauthenticate User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorSchema"
              example:
                errors: "Username or password wrong"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /auth/logout:
    delete:
      tags:
        - "Auth"
      summary: "Logout a user and delete the token from the database"
      parameters:
        - $ref: "#/components/parameters/X-API-TOKEN"
      responses:
        200:
          $ref: "#/components/responses/GeneralSuccessResponse"
        401:
          $ref: "#/components/responses/UnauthenticatedErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /users:
    post:
      tags:
        - "Users"
      summary: "Create a user from appropriate admin"
      parameters:
        - $ref: "#/components/parameters/X-API-TOKEN"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserCreateRequestSchema"
      responses:
        201:
          $ref: "#/components/responses/SuccessCreateOrGetOrUpdateUserResponse"
        400:
          description: "Failed created user, client error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorSchema"
              example:
                errors: "Username must not blank, password must not blank, ??"
        401:
          $ref: "#/components/responses/UnauthenticatedErrorResponse"
        403:
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    get:
      tags:
        - "Users"
      summary: "Get list of users"
      parameters:
        - $ref: "#/components/parameters/X-API-TOKEN"
        - in: query
          name: username
          description: "Search users by username"
          schema:
            type: string
        - in: query
          name: name
          description: "Search users by first name or last name"
          schema:
            type: string
        - in: query
          name: phone
          description: "Search users by phone number"
          schema:
            type: string
        - in: query
          name: email
          description: "Search users by email address"
          schema:
            type: string
        - in: query
          name: role
          description: "Search users by role"
          schema:
            type: string
        - in: query
          name: page
          description: "Current page number"
          schema:
            type: integer
            default: 0
        - in: query
          name: size
          description: "Maximum data users per page"
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: "Success to fetch data users"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserResponseSchema"
                  paging:
                    $ref: "#/components/schemas/PagingSchema"
              examples:
                GetUsers:
                  value:
                    data:
                      - username: "john321"
                        firstName: "John"
                        lastName: "Doe"
                        phone: "62810000000"
                        email: "john@example.com"
                        photo: "0101011011001010100010101010..."
                        role: "Admin Warehouse"
                    paging:
                      currentPage: 0
                      totalPage: 10
                      sizePerPage: 10
        401:
          $ref: "#/components/responses/UnauthenticatedErrorResponse"
        403:
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

  /users/{username}:
    get:
      tags:
        - "Users"
      summary: "Get the users"
      parameters:
        - $ref: "#/components/parameters/X-API-TOKEN"
        - $ref: "#/components/parameters/USERNAME-PATH"
      responses:
        200:
          $ref: "#/components/responses/SuccessCreateOrGetOrUpdateUserResponse"
        401:
          $ref: "#/components/responses/UnauthenticatedErrorResponse"
        403:
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        404:
          $ref: "#/components/responses/UserNotFoundErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    patch:
      tags:
        - "Users"
      # TODO: add feature to disable users
      summary: "Edit a user depend of username"
      parameters:
        - $ref: "#/components/parameters/X-API-TOKEN"
        - $ref: "#/components/parameters/USERNAME-PATH"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserUpdateRequestSchema"
            examples:
              UserUpdate:
                $ref:  "#/components/examples/UserUpdateRequestExample"
      responses:
        200:
          $ref: "#/components/responses/SuccessCreateOrGetOrUpdateUserResponse"
        401:
          $ref: "#/components/responses/UnauthenticatedErrorResponse"
        403:
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        404:
          $ref: "#/components/responses/UserNotFoundErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

  /users/current:
    get:
      tags:
        - "Users"
      summary: "Get Current User"
      parameters:
        - $ref: "#/components/parameters/X-API-TOKEN"
      responses:
        200:
          $ref: "#/components/responses/SuccessCreateOrGetOrUpdateUserResponse"
        401:
          $ref: "#/components/responses/UnauthenticatedErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    patch:
      tags:
        - "Users"
      summary: "Update user profile"
      parameters:
        - $ref: "#/components/parameters/X-API-TOKEN"
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - password
                - firstName
                - phone
                - email
              type: object
              properties:
                password:
                  type: string
                  minLength: 8
                  maxLength: 100
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 100
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 100
                phone:
                  type: string
                  minLength: 8
                  maxLength: 20
                email:
                  type: string
                photo:
                  type: string
                  format: binary
      responses:
        200:
          $ref: "#/components/responses/SuccessCreateOrGetOrUpdateUserResponse"
        401:
          $ref: "#/components/responses/UnauthenticatedErrorResponse"
        404:
          $ref: "#/components/responses/UserNotFoundErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

# TODO: Adding reset password ENDPOINT

# ADDRESS
  /users/current/addresses:
    post:
      tags:
        - "Addresses Current User"
      summary: "Create user address"
      parameters:
        - $ref: "#/components/parameters/X-API-TOKEN"
        - $ref: "#/components/parameters/USERNAME-PATH"
      requestBody:
        $ref: "#/components/requestBodies/AddressRequestBody"
      responses:
        201:
          $ref: "#/components/responses/AddressResponse"
        400:
          $ref: "#/components/responses/AddressBadRequestErrorResponse"
        401:
          $ref: "#/components/responses/UnauthenticatedErrorResponse"
        403:
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        404:
          $ref: "#/components/responses/UserNotFoundErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    get:
      tags:
        - "Addresses Current User"
      summary: "Get list of address users"
      parameters:
        - $ref: "#/components/parameters/X-API-TOKEN"
        - $ref: "#/components/parameters/USERNAME-PATH"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserAddressSchema"
        401:
          $ref: "#/components/responses/UnauthenticatedErrorResponse"
        403:
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        404:
          $ref: "#/components/responses/UserNotFoundErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /users/current/addresses/{addressId}:
    get:
      tags:
        - "Addresses Current User"
      summary: "Get an address record from a user"
      parameters:
        - $ref: "#/components/parameters/X-API-TOKEN"
        - $ref: "#/components/parameters/USERNAME-PATH"
        - $ref: "#/components/parameters/ADDRESS-ID-PATH"
      responses:
        200:
          $ref: "#/components/responses/AddressResponse"
        401:
          $ref: "#/components/responses/UnauthenticatedErrorResponse"
        403:
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        404:
          $ref: "#/components/responses/UserAndAddressNotFoundErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    put:
      tags:
        - "Addresses Current User"
      summary: "Update an address record from a user"
      parameters:
        - $ref: "#/components/parameters/X-API-TOKEN"
        - $ref: "#/components/parameters/USERNAME-PATH"
        - $ref: "#/components/parameters/ADDRESS-ID-PATH"
      requestBody:
        $ref: "#/components/requestBodies/AddressRequestBody"
      responses:
        200:
          $ref: "#/components/responses/AddressResponse"
        400:
          $ref: "#/components/responses/AddressBadRequestErrorResponse"
        401:
          $ref: "#/components/responses/UnauthenticatedErrorResponse"
        403:
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        404:
          $ref: "#/components/responses/UserAndAddressNotFoundErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    delete:
      tags:
        - "Addresses Current User"
      summary: "Delete an address record from a user"
      parameters:
        - $ref: "#/components/parameters/X-API-TOKEN"
        - $ref: "#/components/parameters/USERNAME-PATH"
        - $ref: "#/components/parameters/ADDRESS-ID-PATH"
      responses:
        200:
          description: "Success Delete an address"
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: string
              example:
                data: OK
        401:
          $ref: "#/components/responses/UnauthenticatedErrorResponse"
        403:
          $ref: "#/components/responses/UnauthorizedErrorResponse"
        404:
          $ref: "#/components/responses/UserAndAddressNotFoundErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
components:
  schemas:
    UserCreateRequestSchema:
      required:
        - username
        - password
        - firstName
        - phone
        - email
        - role
      type: object
      properties:
        username:
          type: string
          minLength: 5
          maxLength: 100
        password:
          type: string
          minLength: 8
          maxLength: 100
        firstName:
          type: string
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          minLength: 1
          maxLength: 100
        phone:
          type: string
          minLength: 8
          maxLength: 20
        email:
          type: string
        photo:
          type: string
          format: binary
        role:
          type: string
        address:
          $ref: "#/components/schemas/UserAddressSchema"

    UserUpdateRequestSchema:
      required:
        - password
        - firstName
        - phone
        - email
        - role
      type: object
      properties:
        password:
          type: string
          minLength: 8
          maxLength: 100
        firstName:
          type: string
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          minLength: 1
          maxLength: 100
        phone:
          type: string
          minLength: 8
          maxLength: 20
        email:
          type: string
        photo:
          type: string
          format: binary
        role:
          type: string
    UserResponseSchema:
      type: object
      properties:
        username:
          type: string
          minLength: 5
          maxLength: 100
        firstName:
          type: string
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          minLength: 1
          maxLength: 100
        phone:
          type: string
          minLength: 8
          maxLength: 20
        email:
          type: string
        photo:
          type: string
          format: binary
        role:
          type: string
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/UserAddressSchema"
    UserAddressSchema:
      type: object
      required:
        - street
        - city
        - province
        - country
        - postalCode
      properties:
        id:
          type: integer
        street:
          type: string
        village:
          type: string
        district:
          type: string
        city:
          type: string
        province:
          type: string
        country:
          type: string
        postalCode:
          type: string
        usernameId:
          type: string
    PagingSchema:
      type: object
      properties:
        currentPage:
          type: integer
        totalPage:
          type: integer
          default: 10
        size:
          type: integer
          default: 10
    GeneralErrorSchema:
      type: object
      properties:
        errors:
          type: string
  examples:
    UserUpdateRequestExample:
      value: 
        password: "secretpassword123"
        firstName: "John"
        lastName: "Doe"
        phone: "62810000000"
        email: "john@example.com"
        photo: "0101011011001010100010101010..."
        role: "Admin Gudang"
    UserResponseExample:
      value:
        username: "john321"
        firstName: "John"
        lastName: "Doe"
        phone: "62810000000"
        email: "john@example.com"
        photo: "0101011011001010100010101010..."
        role: "Admin Gudang"

    AddressWithoutIdExample:
      value:
        street: "JLN Diponegoro"
        village: "Kel. Air Baru"
        district: "Kec. Pantai Indah"
        city: "Kota Meikarta"
        province: "DKI Jakarta"
        country: "Indonesia"
        postalCode: "123123"
    AddressResponseExample:
      value:
        data:
          id: 1234
          street: "JLN Diponegoro"
          village: "Kel. Air Baru"
          district: "Kec. Pantai Indah"
          city: "Kota Meikarta"
          province: "DKI Jakarta"
          country: "Indonesia"
          postalCode: "123123"
          usernameId: "john321"
  parameters:
    X-API-TOKEN:
      name: "X-API-TOKEN"
      in: "header"
      required: true
      description: "auth token"
      schema:
        type: string
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
    USERNAME-PATH:
      name: "username"
      in: path
      required: true
      schema:
        type: string
      example: john321
    ADDRESS-ID-PATH:
      name: "addressId"
      in: path
      required: true
      schema:
        type: integer
      example: 1234
  requestBodies:
    AddressRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserAddressSchema"
          examples:
            Address:
              $ref: "#/components/examples/AddressWithoutIdExample"
  responses:
    GeneralSuccessResponse:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: string
          example:
            data: "OK"
    SuccessCreateOrGetOrUpdateUserResponse:
      description: "Success get/update a user with username"
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/UserResponseSchema"
          example:
            data:
              username: "john321"
              firstName: "John"
              lastName: "Doe"
              phone: "62810000000"
              email: "john@example.com"
              photo: "0101011011001010100010101010..."
              role: "Admin Gudang"
              addresses:
                - id: 123
                  street: "JL Examp"
                  village: "Kel. Examp"
                  district: "Kec. Examp"
                  city: "Metro City"
                  province: "Mars Province"
                  country: "Wakanda"
                  postalCode: "0000000"
    AddressResponse:
      description: "Success"
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: "#/components/schemas/UserAddressSchema"
          examples:
            Address Response:
              $ref: "#/components/examples/AddressResponseExample"
    AddressBadRequestErrorResponse:
      description: "Failed created address, client error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorSchema"
          example:
            errors: "Street must not blank, city must not blank, province must not blank, ..."
    UnauthenticatedErrorResponse:
      description: "Unauthenticated request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorSchema"
          example:
            errors: "Unauthenticated request"
    UserNotFoundErrorResponse:
      description: "User is not found."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorSchema"
          example:
            errors: "User is not found."
    UserAndAddressNotFoundErrorResponse:
      description: "User is not found."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorSchema"
          examples:
            User not found:
              value:
                errors: "User is not found."
            Address not found:
              value:
                errors: "Address is not found."
    UnauthorizedErrorResponse:
      description: "User Forbidden to make request to this endpoint"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorSchema"
          example:
            errors: "Unauthorized request"
    ServerErrorResponse:
      description: "Server error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorSchema"
          example:
            errors: "Server unavailable, try again later"
  
